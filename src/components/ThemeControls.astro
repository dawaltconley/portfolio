---
import FontAwesome from './FontAwesome.astro';
import { faBrush, faSun, faMoon } from '@fortawesome/pro-solid-svg-icons';

export interface Props {
  class?: string;
}
const { class: className } = Astro.props;
---

<div class={`flex ${className ?? ''}`}>
  <button class="spotlight-button -my-2">
    <FontAwesome class="p-2 box-content" icon={faBrush} />
  </button>
  <button class="spotlight-button -my-2">
    <FontAwesome class="p-2 box-content" icon={faSun} />
  </button>
  <button class="spotlight-button -my-2">
    <FontAwesome class="p-2 box-content" icon={faMoon} />
  </button>
</div>

<script>
  type ColorScheme = 'light' | 'dark';
  const isColorScheme = (s: string | null | undefined): s is ColorScheme =>
    s === 'light' || s === 'dark';
  const prefersDark = window.matchMedia('(prefers-color-scheme: dark)');

  class Theme {
    element: HTMLElement;
    #defaultIndex = 0;

    constructor(element: HTMLElement = document.documentElement) {
      this.element = element;
      this.index = this.loadTheme() ?? this.#defaultIndex;
      const colorScheme = this.loadColorScheme();
      if (colorScheme) this.colorScheme = colorScheme;
    }

    set index(n: number) {
      this.element.dataset.theme = n.toString();
      this.saveTheme(n);
    }
    get index(): number {
      let saved =
        this.element.dataset.theme && parseInt(this.element.dataset.theme);
      if (saved) return saved;
      return this.#defaultIndex;
    }

    set colorScheme(scheme: ColorScheme) {
      this.element.dataset.colorScheme = scheme;
      this.saveColorScheme(scheme);
    }
    get colorScheme(): ColorScheme {
      let saved = this.element.dataset.colorScheme;
      if (isColorScheme(saved)) return saved;
      return prefersDark.matches ? 'dark' : 'light';
    }

    loadTheme(): number | null {
      const saved = window.localStorage.getItem('theme');
      return (saved && parseInt(saved)) || null;
    }
    saveTheme(n: number): void {
      window.localStorage.setItem('theme', n.toString());
    }

    loadColorScheme(): ColorScheme | null {
      const saved = window.localStorage.getItem('colorScheme');
      return isColorScheme(saved) ? saved : null;
    }
    saveColorScheme(scheme: ColorScheme): void {
      window.localStorage.setItem('colorScheme', scheme);
    }
  }

  const globalTheme = new Theme(document.documentElement);

  const setDefaultColorScheme = (): void => {
    if (!window.localStorage.getItem('colorScheme'))
      document.documentElement.dataset.themeStyle = prefersDark.matches
        ? 'dark'
        : 'light';
  };
  prefersDark.addEventListener('change', setDefaultColorScheme);
  setDefaultColorScheme();
</script>
