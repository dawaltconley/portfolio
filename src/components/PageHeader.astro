---
import type { ClipPath } from '@browser/utils';
import Header from '@components/Header.astro';
import { contactLinks } from '@data/site';

export interface Props {
  class?: string;
  layerClass?: string;
  tag?: 'header' | 'div';
}

const { tag, class: className, layerClass } = Astro.props;
const clipPath: ClipPath = [
  [0, 0],
  [0.4, 0],
  [0.5, 1],
  [0, 1],
];
const initPath = clipPath
  .map(([, y]) => `0 ${(y * 100).toFixed(2)}%`)
  .join(', ');
const Wrapper = tag ?? 'div';
---

<Wrapper class={`page-header ${className ?? ''}`}>
  <Header links={contactLinks} />
  <slot />
  <div
    class={`page-header__layer ${className ?? ''} ${layerClass ?? ''}`}
    aria-hidden="true"
    style={`--clip-path: ${initPath}`}
    data-clip-path={JSON.stringify(clipPath)}
  >
    <slot />
  </div>
</Wrapper>

<style>
  .page-header {
    position: relative;
  }

  .page-header__layer {
    --clip-page: 0 0, 45% 0, 55% 100%, 0 100%;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    margin: 0;
    clip-path: polygon(var(--clip-path, 0 0));
    /* clip-path: circle(30% at 150px 100px); */
    transition: clip-path 1s ease-out;
    pointer-events: none;
  }

  .page-header :global(.theme-controls) {
    --theme-light: 0;
    --theme-dark: 1;
    color: white;
  }
  .page-header :global(.theme-controls .spotlight-button) {
    --color: white;
  }
</style>

<script>
  import type { ClipPath } from '@browser/utils';
  import { pathToClip } from '@browser/utils';

  const headerLayer = document.querySelector(
    '.page-header__layer'
  ) as HTMLElement;

  const path = JSON.parse(headerLayer.dataset.clipPath ?? 'null') as ClipPath;
  const pathAnchor = 4;

  const updateClip = (path: ClipPath) => {
    headerLayer.style.setProperty('--clip-path', pathToClip(path));
  };

  updateClip(path);

  let animating = false;
  document.addEventListener(
    'mousemove',
    ({ clientX, clientY }) => {
      if (animating) return;
      animating = true;
      const adjustX = (clientX - window.innerWidth / 2) / window.innerWidth / 1;
      const adjustY =
        (clientY - window.innerHeight / 2) / window.innerHeight / 1;
      const newPath: ClipPath = path
        .slice(pathAnchor)
        .map(([x, y]) => [
          x + adjustX * (x - 0.5) ** 2,
          y + adjustY * (y - 0.5) ** 2,
        ]);
      requestAnimationFrame(() => {
        updateClip(path.slice(0, pathAnchor).concat(newPath));
        animating = false;
      });
    },
    { passive: true }
  );
</script>
