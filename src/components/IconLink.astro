---
import type { IconLink, IconStyle } from '@data/icons';
import { icons, getIconFromUrl } from '@data/icons';
import FontAwesome from './FontAwesome.astro';

interface PropsBase extends Partial<Omit<IconLink, 'type'>> {
  type: keyof IconStyle;
  id?: keyof typeof icons;
  class?: string;
  inline?: boolean;
  urlText?: string;
}

interface PropsId extends PropsBase {
  id: keyof typeof icons;
}

interface PropsUrl extends PropsBase {
  url: string;
}

export type Props = PropsId | PropsUrl;

const {
  id,
  type: iconStyle,
  class: className,
  inline = false,
  urlText,
  ...iconProps
} = Astro.props;

let icon =
  id !== undefined ? icons[id] : iconProps.url && getIconFromUrl(iconProps.url);
if (!icon || !icon.type[iconStyle]) return;

icon = {
  ...icon,
  ...iconProps,
};

const IconWrapper = icon.url ? 'a' : 'span';
---

<IconWrapper href={icon.url} title={icon.name} class={className ?? ''}>
  {
    iconStyle === 'fa' ? (
      <FontAwesome
        icon={icon.type[iconStyle]}
        class="iconify"
        inline={inline}
      />
    ) : (
      <span
        class={`iconify ${iconStyle.toString()}`}
        data-icon={icon.type[iconStyle]}
        data-inline={inline.toString()}
      />
    )
  }
  {icon.url && urlText && <span class="icon-url-text">{urlText}</span>}
</IconWrapper>

<style lang="scss">
  .iconify,
  .iconify-inline {
    width: 1em;
    height: 1em;
  }
  .iconify-inline,
  [data-inline='true'] {
    display: inline;
  }
  .icon-url-text {
    margin-left: 0.4em;
  }

  .skill {
    $skill-bg: #242938;
    $skill-radius: 0.22em;

    &[data-icon='logos:npm-icon'],
    &[data-icon='logos:aws-cloudformation'] {
      border-radius: $skill-radius;
    }
    &[data-icon='vscode-icons:file-type-nunjucks'] {
      border-radius: 0.3em;
    }
    &[data-icon='vscode-icons:file-type-jekyll'] {
      background-color: $skill-bg;
      padding: 0.08em;
      border-radius: $skill-radius;
    }
  }
</style>

<script>
  import '@iconify/iconify';
</script>
