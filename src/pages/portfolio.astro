---
import Layout from '../layouts/Base.astro';
import Project from '../components/ProjectPreview.astro';
import { getCollection } from 'astro:content';
import { tags, getExcerpt } from '../data/projects';

import IconLink from '../components/IconLink.astro';

const projects = await getCollection('projects');
---

<Layout title="My projects">
  <div class="site-header flex flex-col pt-[10vw]">
    <header class="container mx-auto mt-auto mb-8 px-4 font-serif">
      <h1 class="mb-2 text-7xl font-semibold leading-[0.85]">
        Dylan Awalt-Conley
      </h1>
      <p class="text-3xl font-medium">
        Some of my websites and JavaScript things.
      </p>
    </header>
  </div>
  <main class="relative z-10 bg-theme-bg">
    <ul
      class="container mx-auto grid gap-4 px-4 py-8 sm:grid-cols-2 xl:grid-cols-3"
    >
      {
        projects
          .filter((project) => project.data.image)
          .map(async (project) => (
            <Project project={project}>
              <p>{getExcerpt(project)}</p>
            </Project>
          ))
      }
    </ul>
  </main>
  <footer class="space-x-2 p-4">
    {
      Array.from(tags).map((tag) => (
        <IconLink id={tag} type="skill" inline={true} />
      ))
    }
  </footer>
</Layout>

<style lang="scss">
  @use 'scss-properties' as props;

  .site-header {
    --height: 20vw;
    position: relative;
    min-height: var(--height);

    &::before,
    &::after {
      content: '';
      @apply fixed top-0 left-0 w-full;
      height: var(--height);
      pointer-events: none;
    }

    &::before {
      z-index: -1;
      background-color: props.set(
        --theme-br,
        $hue: adjust -180deg,
        $lightness: change calc(100% - var(--theme-br-l))
      );
      @supports (color: color(display-p3 1 1 1)) {
        @media (color-gamut: p3) {
          --colorspace: display-p3;
          background-color: color(
            var(--colorspace) calc((255 - var(--theme-br-r)) / 255)
              calc((255 - var(--theme-br-g)) / 255)
              calc((255 - var(--theme-br-b)) / 255)
          );
        }
        @media (color-gamut: rec2020) {
          --colorspace: rec2020;
        }
      }
      /* clip-path: polygon(0 5%, 0 100%, 80% 100%); */
      /* clip-path: polygon(0 0, 100% 0, 100% 100%, 90% 100%); */
      clip-path: polygon(100% 0, 0 0, 0 100%, 0% 90%);
    }

    &::after {
      background-color: white;
      mix-blend-mode: difference;
      /* clip-path: polygon(0 2%, 0 0, 100% 0, 100% 100%, 80% 100%); */
      clip-path: polygon(100% 2%, 100% 0, 0 0, 0 100%, 0% 100%);
    }
  }

  .clip-path {
    --clip-path: 100% 2%, 100% 0, 0 0, 0 100%, 0% 100%;
    clip-path: polygon(var(--clip-path));
  }
</style>

<script>
  const header = document.querySelector('.site-header') as HTMLElement;
  header.classList.remove('site-header');

  const headerLayer = header.cloneNode(true) as typeof header;
  headerLayer.removeAttribute('id');
  headerLayer.setAttribute('aria-hidden', 'true');
  header.classList.add('relative');
  headerLayer.classList.add(
    'absolute',
    'inset-0',
    'text-white',
    'bg-theme-br',
    'clip-path'
  );
  headerLayer.style.margin = '0px';

  type ClipPath = [number, number][];
  const path: ClipPath = [
    [0, 0.3],
    [0, 0],
    [1, 0],
    [1, 0.2],
    [0.78, 0.42],
    [0.58, 0.72],
    [0.18, 0.22],
  ];
  const pathAnchor = 4;

  const pathToClip = (path: ClipPath) =>
    path.map(([x, y]) => `${x * 100}% ${y * 100}%`).join(', ');
  const updateClip = (path: ClipPath) => {
    headerLayer.style.setProperty('--clip-path', pathToClip(path));
  };

  updateClip(path);
  header.appendChild(headerLayer);

  let animating = false;
  document.addEventListener(
    'mousemove',
    ({ screenX, screenY }) => {
      if (animating) return;
      animating = true;
      const adjustX = (screenX - window.innerWidth / 2) / window.innerWidth / 1;
      const adjustY =
        (screenY - window.innerHeight / 2) / window.innerHeight / 1;
      const newPath: ClipPath = path
        .slice(pathAnchor)
        .map(([x, y]) => [
          x + adjustX * (x - 0.5) ** 2,
          y + adjustY * (y - 0.5) ** 2,
        ]);
      requestAnimationFrame(() => {
        updateClip(path.slice(0, pathAnchor).concat(newPath));
        animating = false;
      });
    },
    { passive: true }
  );
</script>
