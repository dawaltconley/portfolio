---
import '@styles/icons.scss';
import Layout from '@layouts/Base.astro';
import Header from '@components/Header.astro';
import ProjectGrid, { ProjectPreviewData } from '@components/ProjectGrid';
import ContactForm from '@components/ContactForm';
import Footer from '@components/Footer.astro';
import { contactLinks } from '@data/site';
import { getExcerpt, generateImages, getPreviewLinks } from '@build/projects';
import projectOrder from '@data/project-order';
import { getCollection } from 'astro:content';

const projects = await getCollection(
  'projects',
  ({ data }) => data.draft !== true
);
projects.sort((a, b) => {
  let iA = projectOrder.indexOf(a.slug);
  let iB = projectOrder.indexOf(b.slug);
  // sort unordered items by date
  if (iA < 0 && iB < 0) {
    return b.data.created.getTime() - a.data.created.getTime();
  }
  // sort ordered items ahead of unordered items
  if (iA < 0) iA = Infinity;
  if (iB < 0) iB = Infinity;
  return iA - iB;
});

const projectPreviews: ProjectPreviewData[] = await Promise.all(
  projects.map(async (project) => {
    const sizes =
      '(min-width: 1536px) 482px, (min-width: 1280px) 397px, (min-width: 1024px) 474px, (min-width: 768px) 346px, (min-width: 640px) 579px, 100vw';
    const images = await generateImages(project, sizes);

    return {
      ...project.data,
      id: project.slug,
      links: getPreviewLinks(project),
      images: images,
      excerpt: getExcerpt(project),
      icons: project.data.tags,
    };
  })
);
---

<Layout
  title="Web Portfolio â€“ Dylan Awalt-Conley"
  description="Some of my websites and JavaScript projects."
  colorScheme="dark"
  class="bg-indigo-950"
>
  <div class="relative flex min-h-[60vh] flex-col overflow-hidden bg-gray-900">
    <svg
      class="absolute left-0 top-0 h-full"
      version="1.1"
      viewBox="0 0 433 264"
      xmlns="http://www.w3.org/2000/svg"
    >
      <defs>
        <linearGradient id="gradient-1">
          <stop offset="0" stop-opacity="0.1"></stop>
          <stop offset="1" stop-opacity="0.5"></stop>
        </linearGradient>
        <linearGradient id="gradient-2" gradientTransform="rotate(60)">
          <stop offset="0" stop-opacity="0.1"></stop>
          <stop offset="1" stop-opacity="0.5"></stop>
        </linearGradient>
        <clipPath id="sloped-div-top" clipPathUnits="objectBoundingBox"
          ><path d="m0,0 c0.7,0.2,1,1,1,1 H0"></path></clipPath
        >
        <clipPath id="sloped-div-bottom" clipPathUnits="objectBoundingBox"
          ><path d="m0,1 c0.7,-0.2,1,-1,1,-1 H0"></path></clipPath
        >
      </defs>
      <g>
        <path fill="url(#gradient-1)" d="m21 264c15-164 47-264 47-264h-68v264z"
        ></path>
        <path fill="url(#gradient-2)" d="m433 0c-206 0-433 58-433 58v-58z"
        ></path>
      </g>
    </svg>
    <Header links={contactLinks} class="mb-[10vh] py-6" />
    <h1
      class="container relative mx-auto mb-64 mt-8 text-7xl font-extrabold leading-[0.85]"
    >
      Dylan Awalt-Conley
    </h1>
  </div>
  <main class="relative">
    <div
      class="slope-top absolute -right-1 bottom-almost-full left-0 pb-4 pt-16 before:bg-indigo-950"
    >
      <div class="container relative mx-auto">
        <h2 class="text-6xl font-extrabold">Work</h2>
        <p class="text-2xl font-extralight">
          Some of my websites and JavaScript&nbsp;projects.
        </p>
      </div>
    </div>
    <div
      class="slope-border-bottom w-full bg-indigo-950 pb-4 after:border-gray-200"
    >
      <div class="container mx-auto">
        <ProjectGrid
          client:load
          projects={projectPreviews}
          filter="website"
          slideshowInterval={10000}
        />
      </div>
    </div>
  </main>
  <div class="pt-slope-border flex min-h-[60vh] flex-col bg-pink-800">
    <div class="container m-auto pb-24 pt-16">
      <ContactForm action="https://api.dylan.ac/contact" client:visible />
    </div>
  </div>
  <Footer />
</Layout>

<style lang="scss">
  #gradient-1 stop {
    stop-color: theme('colors.indigo.900');
  }
  #gradient-2 stop {
    stop-color: theme('colors.pink.900');
  }

  .slope-top::before {
    content: '';
    position: absolute;
    top: 0px;
    left: 0px;
    width: 100%;
    height: 100%;
    min-width: 40rem;
    clip-path: url(#sloped-div-top);
  }

  %slope-bottom::after {
    content: '';
    position: absolute;
    top: 0px;
    left: 0px;
    width: 100%;
    height: 100%;
    min-width: 40rem;
    clip-path: url(#sloped-div-bottom);
  }

  :root {
    --slope-border-height: max(6rem, 6vw);
  }

  .slope-border-bottom {
    @extend %slope-bottom;
    &::after {
      @apply absolute -right-1 left-0 top-almost-full w-auto bg-inherit;
      height: 6rem;
      height: var(--slope-border-height, 6rem);
    }
  }

  .pt-slope-border {
    padding-top: 6rem;
    padding-top: var(--slope-border-height, 6rem);
  }
</style>
